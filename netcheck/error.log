   Compiling netcheck v0.1.0 (/home/alex/programming/netcheck/netcheck)
warning: unused import: `std::sync::mpsc`
 --> src/fetch_local.rs:4:5
  |
4 | use std::sync::mpsc;
  |     ^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `Receiver`
 --> src/fetch_local.rs:5:31
  |
5 | use std::sync::mpsc::{Sender, Receiver};
  |                               ^^^^^^^^

warning: unused import: `std::sync::mpsc`
 --> src/fetch_dns.rs:3:5
  |
3 | use std::sync::mpsc;
  |     ^^^^^^^^^^^^^^^

warning: unused import: `Receiver`
 --> src/fetch_dns.rs:4:31
  |
4 | use std::sync::mpsc::{Sender, Receiver};
  |                               ^^^^^^^^

warning: unused imports: `Ipv4Addr`, `Ipv6Addr`
  --> src/fetch_dns.rs:13:35
   |
13 | use std::net::{UdpSocket, IpAddr, Ipv4Addr, Ipv6Addr, SocketAddr};
   |                                   ^^^^^^^^  ^^^^^^^^

warning: unreachable statement
   --> src/fetch_dns.rs:108:5
    |
106 |       return CheckDNSResolutionResponse::CannotBind;
    |       --------------------------------------------- any code following this expression is unreachable
107 |
108 | /     let socket = match ip_addr.is_ipv4() {
109 | |         true => {
110 | |             // Set bind address to the interface IP
111 | |             let bind_addr = SocketAddr::new(ip_addr, 5000);
...   |
142 | |         }
143 | |     };
    | |______^ unreachable statement
    |
    = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `message`
   --> src/fetch_dns.rs:104:9
    |
104 |     let message = message.to_vec().unwrap();
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_message`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `error`
   --> src/fetch_dns.rs:157:13
    |
157 |         Err(error) => {
    |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_error`

warning: unused variable: `server`
  --> src/fetch_dns.rs:99:25
   |
99 | fn check_dns_resolution(server: &str, ip_addr: IpAddr) -> CheckDNSResolutionResponse {
   |                         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_server`

warning: unused variable: `ip_addr`
  --> src/fetch_dns.rs:99:39
   |
99 | fn check_dns_resolution(server: &str, ip_addr: IpAddr) -> CheckDNSResolutionResponse {
   |                                       ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_ip_addr`

warning: unused variable: `area`
   --> src/main.rs:321:35
    |
321 |     fn render_network_info(&self, area: Rect) -> Paragraph {
    |                                   ^^^^ help: if this is intentional, prefix it with an underscore: `_area`

warning: multiple variants are never constructed
  --> src/internal_comms.rs:3:5
   |
1  | pub enum FetchedDataMessage {
   |          ------------------ variants in this enum
2  |     LocalInfo(LocalInfo),
3  |     InternetInfo(InternetInfo),
   |     ^^^^^^^^^^^^
4  |     DHCPInfo(DHCPInfo),
   |     ^^^^^^^^
5  |     DNSInfo(DNSInfo),
6  |     Traceroute(Traceroute),
   |     ^^^^^^^^^^
7  |     TCPInfo(TCPInfo),
   |     ^^^^^^^
8  |     HTTPInfo(HTTPInfo),
   |     ^^^^^^^^
9  |     HTTPSInfo(HTTPSInfo),
   |     ^^^^^^^^^
10 |     UDPInfo(UDPInfo),
   |     ^^^^^^^
11 |     NTPInfo(NTPInfo),
   |     ^^^^^^^
12 |     QUICInfo(QUICInfo),
   |     ^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: `netcheck` (bin "netcheck") generated 12 warnings (run `cargo fix --bin "netcheck"` to apply 10 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 1.84s
     Running `target/debug/netcheck`
